/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package a1;

import org.checkerframework.checker.units.qual.A;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import java.io.*;
import java.text.*;
import java.util.*;

public class App {
    private Calendar cal;
    private boolean admin;

    public static void main(String[] args) {
        App converter = new App();
        converter.askUser(converter,"main");
    }

    /*

    * Called by the main class to create simple text based
    * UI to interact with user/admin that uses the system
    */
    public void askUser(App converter, String dir) {
        Update u = converter.config(dir);
        Display display = new Display();
        Scanner scan = new Scanner(System.in);

        System.out.println("Welcome to the Currency Converter!");

        while (true) {
            System.out.println("\nPlease select the identity you want to login from below:");
            System.out.println("ADMIN, USER");
            System.out.print("Enter: ");

            String user = scan.nextLine();

            if (user.toUpperCase().equals("ADMIN"))
                converter.admin = true;
            else if (user.toUpperCase().equals("USER"))
                converter.admin = false;
            else {
                System.out.println("Error: You inputted a non-existent mode.");
                continue;
            }

            System.out.println(String.format("\nWelcome %s!", user.toUpperCase()));
            break;
        }

        while (true) {
            System.out.println("\nPlease select an option from below:");
            System.out.print("EXIT, CONVERT, DISPLAY, SUMMARY");

            if (converter.admin == true)
                System.out.println(", UPDATE");
            else
                System.out.println();

            System.out.print("Enter: ");

            String user = scan.nextLine();
            user = user.toUpperCase();

            if (user.equals("EXIT")) {
                break;

            } else if (user.equals("CONVERT")) {
                // Call the Convert class
                Convert obj = new Convert(u);
                JSONObject latest = null;

                // Store the last JSONelement in class
                latest = converter.part1(dir);
                obj.set_latestJSON(latest);

                // User inputs requirements
                obj.get_require(scan);
                // Show result
                obj.display_convert();

            } else if (user.equals("UPDATE")) {
                // USER has no access to UPDATE function
                if (!converter.admin) {
                    System.out.println("Error: USER does not have the access for this command, " +
                            "please select another command.");
                    continue;
                }

                converter.addDate();
                String dateStr = converter.toDateStr();

                Boolean isChanged = false;

                System.out.println("\nYou choose the UPDATE functionality");
                System.out.println("Please update currencies for " + dateStr);
                String msg = "Do you want to update existing currency rates? (YES/NO): ";
                System.out.print(msg);
                user = scan.nextLine();
                user = converter.askYesNo(user, scan, msg);
                if (user.equals("YES")) {
                    u.updateExisting(scan);
                    isChanged = true;
                }

                // Add new Currency to the system
                System.out.println();
                String msg2 = "Do you want to add a new currency to the system? (YES/NO): ";
                System.out.print(msg2);
                user = scan.nextLine();
                user = converter.askYesNo(user, scan, msg2);

                if (user.equals("YES")) {
                    u.updateNewCurrency(scan);
                    isChanged = true;
                }

                // Only needs to write to history if any changes is made
                if (isChanged) {
                    converter.writeUpdate(u);
                } else {
                    converter.subtractDate();
                }

                // Ask if ADMIN wants to update most popular currencies
                System.out.print("\nCurrent most popular currencies are: ");
                System.out.println(u.getMostPopular());
                String msg3 = "Do you want to update the most popular currencies? (YES/NO): ";
                System.out.print(msg3);
                user = scan.nextLine();
                user = converter.askYesNo(user, scan, msg3);

                if (user.equals("YES")) {
                    u.updateMostPopular(scan);
                    System.out.print("\nThe new most popular currencies are ");
                    System.out.println(u.getMostPopular());
                }

            } else if (user.equals("DISPLAY")) {
                // Call the display class
                display.displayTable(u);

            } else if (user.toUpperCase().equals("SUMMARY")) {
                String currency_1;
                String currency_2;
                System.out.println("Please enter the two currencies you want the summaries of (from, to): ");

                // Ask for the currencies that needs to be summarised
                while (true) {
                    currency_1 = scan.next().toUpperCase();
                    currency_2 = scan.next().toUpperCase();
                    if (u.getSymbols().contains(currency_1) && u.getSymbols().contains(currency_2)) break;
                    else
                        System.out.println("The currency you entered doesn't exist. Please enter some other currencies.");
                }

                System.out.println("Please enter the start and end dates (start, end): ");
                String date_1 = scan.next();
                String date_2 = scan.next();
                Summary s1 = new Summary();

                // Check if the dates are in correct format
                boolean invalid = s1.isValidDate(date_1) && s1.isValidDate(date_2);

                while (invalid == false) {
                    System.out.println("The date is invalid, its format should be in YYYY-MM-DD. Please try again!");
                    System.out.println("Please enter the start and end dates (start, end): ");
                    date_1 = scan.next();
                    date_2 = scan.next();
                    invalid = s1.isValidDate(date_1) && s1.isValidDate(date_2);
                }

                // Check if the dates are in correct order
                boolean invalidOrder = s1.isDateInOrder(date_1, date_2);

                while (invalidOrder == false) {
                    System.out.println("First date needs to be earlier than the second date!");
                    System.out.println("Please enter the start and end dates (start, end): ");
                    date_1 = scan.next();
                    date_2 = scan.next();
                    invalidOrder = s1.isDateInOrder(date_1, date_2);
                }

                try {
                    s1.readJSON(u, currency_1, currency_2, date_1, date_2);
                    invalid = true;
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                // Print out the summary of the currencies
                s1.printHistory();
                System.out.println("The summary of " + currency_1 + " to " + currency_2 + " between " + date_1 + " and " + date_2 + " is:");
                s1.printSummary();
                System.out.println("Would you like to perform more operations? (YES/NO): ");
                user = scan.next().toUpperCase();

                if (user.equals("YES")) {
                    user = scan.nextLine();
                } else {
                    break;
                }
            } else {

                System.out.println("Error: You inputted a non-existent command");
            }
        }
        System.out.println("\nThank you for using the system~");
        System.out.println("See you next time, bye!");
    }

    /*
     * read and gets the latest rate from history.json
     */
    public JSONObject part1(String dir) {
        // read the history.json file, pick the latest date rates.
        JSONArray jsonAll = null;
        JSONObject latest = null;
        String latestDate = null;

        String histPath = String.format("src/%s/resources/history.json", dir);
        File f = new File(histPath);

        try {
            InputStream is = new FileInputStream(f);
            JSONTokener tokener = new JSONTokener(is);
            jsonAll = new JSONArray(tokener);

            // below is to get {date: {rates}}
            JSONObject dateAndRates = jsonAll.getJSONObject(jsonAll.length() - 1);

            // below is to get [date]
            JSONArray dateInArray = dateAndRates.names();

            // to get date
            latestDate = dateInArray.getString(0);

            // to get {rates}
            latest = dateAndRates.getJSONObject(latestDate);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return latest;
    }

    /*
    * Ask an input from the user and check if it's either yes or no
     */
    public String askYesNo(String user, Scanner scan, String msg) {
        user = user.toUpperCase();

        while (!user.equals("YES") && !user.equals("NO")) {
            System.out.println("\nPlease try again! Please only enter YES or NO!");
            System.out.print(msg);
            user = scan.nextLine();
            user = user.toUpperCase();
        }
        return user;
    }

    /*
     * reading a csv file and turn the content to an array list of string.
     */
    public ArrayList<String> readCsvReturnArrayListString(String path) {
        ArrayList<String> ls = new ArrayList<>();

        BufferedReader inputStream = null;
        try {
            inputStream = new BufferedReader(new FileReader(path));

            String line = inputStream.readLine();

            if (line != null) {
                String[] line2 = line.split(",");
                for (String c : line2) {
                    ls.add(c);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return ls;
    }

    /*
     * Read in the initial six currencies and their corresponding exchange rates
     * from the config.csv file. Initialise symbols, and the upToDate matrix which
     * stores the most recent exchanges rates.
     */
    public Update config(String dir) {
        // read the currencies and the most popular currencies from files
        // then put it into symbols and mostPopular.
        ArrayList<ArrayList<Double>> conversion = new ArrayList<>();
        ArrayList<String> symbols = readCsvReturnArrayListString(String.format("src/%s/resources/currencies.csv", dir));
        ArrayList<String> mostPopular = readCsvReturnArrayListString(String.format("src/%s/resources/popular.csv", dir));

        // read the history.json file, pick the latest date rates.
        JSONArray jsonAll = null;
        JSONObject latest = null;
        String latestDate = null;

        String histPath = String.format("src/%s/resources/history.json", dir);
        File f = new File(histPath);

        try {
            InputStream is = new FileInputStream(f);
            JSONTokener tokener = new JSONTokener(is);
            jsonAll = new JSONArray(tokener);

            // below is to get {date: {rates}}
            JSONObject dateAndRates = jsonAll.getJSONObject(jsonAll.length() - 1);

            // below is to get [date]
            JSONArray dateInArray = dateAndRates.names();

            // to get date
            latestDate = dateInArray.getString(0);

            // to get {rates}
            latest = dateAndRates.getJSONObject(latestDate);

        } catch (Exception e) {
            e.printStackTrace();
        }

        latest = this.part1(dir);

        // put the latest rates into matrix.
        int len = symbols.size();

        for (int i = 0; i < len; i++) {
            ArrayList<Double> xAxis = new ArrayList<>();

            JSONObject arr = latest.getJSONObject(symbols.get(i));

            for (int j = 0; j < len; j++) {

                if (i != j)
                    xAxis.add(arr.getDouble(symbols.get(j)));
                else
                    xAxis.add(1.00);
            }
            
            conversion.add(xAxis);
        }

        // set up the calendar based on latest date.
        String[] latestDateSplit = latestDate.split("-");
        int year = Integer.parseInt(latestDateSplit[0]);
        int month = Integer.parseInt(latestDateSplit[1]) - 1;
        int day = Integer.parseInt(latestDateSplit[2]);

        this.cal = Calendar.getInstance();
        this.cal.set(year, month, day);

        // create an instance of Update class
        Update u = new Update(conversion, symbols, mostPopular, jsonAll, dir);

        return u;
    }

    /*
     * Ensures that the new record for a particular date is
     * written to history.json
     */
    public void writeUpdate(Update u) {
        u.writeJson();
        String dateStr = this.toDateStr();
        u.toJson(dateStr);
        u.writeJson();
    }

    /*
     * Converting the Calendar object into date string
     */
    public String toDateStr() {
        SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd");
        form.setCalendar(this.cal);
        String dateStr = form.format(this.cal.getTime());
        return dateStr;
    }

    /*
     * Add one day to the system date
     */
    public void addDate() {
        this.cal.add(Calendar.DATE, 1);
    }

    /*
     * Subtract one day from the system date
     */
    public void subtractDate() {
        this.cal.add(Calendar.DATE, -1);
    }
}